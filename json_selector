#! /usr/bin/env python
import urllib
import argparse
import json
import sys
import logging



ARG_PARSER = argparse.ArgumentParser(description="given an input stream of json objects, one per line, select properties from the inbound objects using those to form json output")
ARG_PARSER.add_argument('-p', '--property', nargs='+', dest='properties', help='the name of a property to select from the incoming json object stream. note that this can be multiple space delimited values and the output will include all of the requested values')
ARG_PARSER.add_argument('-j', '--json', type=open, default=sys.stdin,  dest='json', help='a file contining json blobs ( one per line ) for each blob, select the requested property values and produce a corresponding (to the selected values) json output')
ARG_PARSER.add_argument('-v', '--value-only', action='store_true', help="indicates that only the value of the selected property should be output, as opposed to it's json representation.  This is intended to be used with selection of a single value")
ARG_PARSER.add_argument('-l', '--list-of-values', default="", help="indicates that the return should be the repr'd v version of a python list of the values for the property selected.  the value of this argument will be used as the property name when the list is output.")

args = ARG_PARSER.parse_args()

def get_property(dictionary, property_name):
    if isinstance(dictionary, str) or isinstance(dictionary, unicode):
        dictionary = json.loads(dictionary)

    if "." in property_name:
        plist = property_name.split('.')
        return get_property(dictionary[plist[0]], ".".join(plist[1:]))
    else:
        try:
            return dictionary[property_name]
        except KeyError:
            sys.stderr.write('unable to find key %s maybe one of these:\n%s\n'
                % (property_name, ", ".join(dictionary.keys())))
# default, used if --list-of-values is chosen
o = {}
for line in args.json:
    try:
        d = json.loads(line)
        if not args.list_of_values:
            o = {}
        for prop in args.properties:
            if args.value_only:
                if len(args.properties) == 1:
                    o = get_property(d, prop)
                else:
                    raise Exception("Sorry, can't use --value-only with multiple properties")
            elif args.list_of_values:
                l = o.get(prop, [])
                l.append(get_property(d, prop))
                o[prop] = l
            else:
                o[prop] = get_property(d, prop)
        if not args.list_of_values:
            sys.stdout.write("%s\n" % json.dumps(o))
    except Exception as e:
        sys.stderr.write("%s\n" % logging.traceback.format_exc())

if args.list_of_values:
    sys.stdout.write("%s\n" % json.dumps({ args.list_of_values: o } ))
